group 'de.tuberlin.mcc'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.3.72'
    ext.ktorVersion = '1.2.1'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}


apply plugin: 'java'
apply plugin: 'kotlin'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile("ch.qos.logback:logback-classic:1.2.3")
    compile group: 'com.google.code.gson', name: 'gson', version: '2.3.1'
    compile "io.ktor:ktor-server-core:$ktorVersion"
    compile "io.ktor:ktor-server-netty:$ktorVersion"
    compile "io.ktor:ktor-client-core:$ktorVersion"
    compile "io.ktor:ktor-client-core-jvm:$ktorVersion"
    compile "io.ktor:ktor-client-apache:$ktorVersion"
    compile "com.xenomachina:kotlin-argparser:2.0.7"
    compile "org.jetbrains.exposed:exposed-core:0.24.1"
    compile "org.jetbrains.exposed:exposed-dao:0.24.1"
    compile "org.jetbrains.exposed:exposed-jdbc:0.24.1"
    compile("mysql:mysql-connector-java:5.1.48")
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
jar {
    manifest {
        attributes 'Main-Class': 'MainKt'
    }

    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

void jarFactory(Jar jarTask, jarName, mainClass) {

    jarTask.manifest {
        attributes(
                'Main-Class':  mainClass
        )
    }
    jarTask.zip64 = true
    jarTask.classifier = 'all'
    jarTask.baseName = jarName
    jarTask.from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    jarTask.with jar
    jarTask.doLast {
        println 'Build ' + jarTask.name + ' ended'
    }
}

task buildBenchmarkTool(type: Jar) {
    jarFactory(it, 'benchmarkTool', 'tools.benchmarkrunner.BenchmarkRunnerToolKt')
}

task buildMonitorRetrieverTool(type: Jar) {
    jarFactory(it, 'monitorRetrieverTool', 'tools.monitorretriever.MonitorRetrieverToolKt')
}